<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[疫苗之王]]></title>
    <url>%2F2018%2F07%2F22%2Fyimiaozhiwang%2F</url>
    <content type="text"><![CDATA[本文来源于兽楼处，原文标题《疫苗之王》 2001年，东北一家国有疫苗公司悄无声息进行改制。多年后再回首，人们才明白其中意义。 那年的9月18日，上市公司长春高新旗下的长生生物迎来了两位新的股东——韩刚君和杜伟民。 韩刚君用1932万元买下了长生生物30%的股权，成为第二大股东；他和杜伟民的合资公司则成为了长生的小股东。 杜伟民是长生生物的销售总监。 这笔交易几乎没人注意到。长生生物被放到聚光灯下，是在两年后了。 2003年末，长春高新和长生生物的掌门人高俊芳把2000万打进公司账户，要将长生生物私有化。 算下来，高俊芳的出价是每股2.4元；而当时多位竞标者表示，他们愿意出3元/股的价格。 高俊芳很感谢他们的出价，然后拒绝了他们。 这引起了漫天质疑，有人把低价贱卖国有资产的举报信寄到了市政府。但仍然没有阻挡高俊芳成为长生生物第三大股东。 终于，高俊芳、韩刚君和杜伟民走到一起，他们手中握着长生生物的大半股份。 2007年，韩刚君把自己的股份卖给了高俊芳，帮助后者成为长生生物的绝对控制人。 十年后再回首，他们手中已经掌握了中国疫苗的半壁江山——最大的乙肝疫苗企业、最大的流感疫苗企业、第二大水痘疫苗企业、第二和第四大狂犬病疫苗企业…… 他们生产的疫苗，每天都源源不断，注入你和你孩子的身体中。 就在高俊芳顶着资本市场的唾骂，完成长生生物私有化的时候，韩刚君与杜伟民已经南下，他们盯上了刚刚拿到狂犬病疫苗生产资质的常州延申生物。 很快，韩刚君与杜伟民以2000万元拿下了常州延申90%的股份，将其改组成为江苏延申，韩刚君担任董事长。 杜伟民在加拿大远程完成了这一切。他这时已经拿到了加拿大绿卡，只要再待几年，他就能成为中国人民老朋友白求恩大夫的老乡。 之后不到三年的时间里，韩刚君为江苏延申拿到了流感疫苗、气管炎疫苗、疖病疫苗的生产批文。江苏延申很快成为中国最大的流感疫苗供应商和第四大狂犬病疫苗公司。 2007年10月，韩刚君和杜伟民已经准备好了上市资料。如果不是一次偶然的发现，江苏延申将会登陆资本市场。 2009年3月，大连金港迪安狂犬疫苗在抽检中被发现造假，食药监总局马上对狂犬疫苗生产企业进行突击检查，江苏延申被查出五批产品涉嫌造假。 食药监局发现，延申偷工减料、弄虚作假、逃避监管，疫苗抗原含量低于国家标准，达不到药效。 北大医学部的专家将注射失效的疫苗总结为两个字——杀人。 但这时，江苏延申的18万份疫苗已经流入21个省107个疾控中心，全部被注射进了病人体中。 江苏延申表示，我们无能为力。 没有召回、没有补偿。案件发生后，江苏延申因为生产、销售伪劣产品罪，被判处罚金三百万元，总经理和五名员工被判刑。 董事长韩刚君和另一位大股东却毫发无伤。 更诡异的是，江苏延申很快东山再起，仅仅半年之后，就获得了防疫部门160万人份甲流订单，价格超过亿元；不久又获得了甲流疫苗生产牌照。 就在调查组的眼皮子底下，杜伟民把这个生产假疫苗企业的股份全部转让出去，套现两亿元，顺利退出延申。 杜伟民的眼前是一片星辰大海。 根据一篇人物报道，2007年，杜伟民毅然变卖了加拿大的家产，放弃了入籍，带着妻儿回国了，重新投身疫苗领域。 “我熟悉这个行业，清楚中国的生物产业是要发展的。而且我在国外越来越觉得，让疫苗技术掌握在中国人自己的手上，关系到国家的生物安全”。 中国真是一片化腐朽为神奇的土地。在海外迷失了自己，回国就对了。 不过，杜先生没有放弃加拿大绿卡和香港身份证。 2008年开始，杜伟民悄无声息地在产权交易所吃下了深圳老国企康泰生物的大部分股份，控制了这家中国最大的乙肝疫苗生产商。 深圳康泰的乙肝疫苗技术，来自于美国人的人道主义援助。1989年9月，美国默克公司以微不足道的700万美元向中国转让了全套工艺技术。 杜伟民把当年重组江苏延申的手法用在了康泰生物的重组上，开始为上市铺路。 疫苗企业上市，最大的障碍是产品种类单一，康泰多年来上市无功而返，就是因为只有乙肝疫苗这一种产品。 很快，杜先生通过收购北京民海生物，让康泰的产品多样化。2012年底到2013年，康泰自主研发的三款疫苗——Hib疫苗、麻风疫苗、四联疫苗获准生产，先后上市。 民海生物是怎么在短时间内获得三款产品的生产许可？ 北京高级法院的一则审判书显示，2010年到2014年间，国家食品药品监督管理局药品审议中心副主任尹红章收受杜伟民47万元，为民海生物的药品申报审批事宜提供帮助。 除了加快新疫苗上市，杜伟民也让康泰的主打产品乙肝疫苗获得了新生。 当年杜伟民还在长生生物做销售时，中国的疫苗市场基本被国有七大生物制品公司瓜分，互不侵犯。杜伟民瞅准时机，用拉低价格的方式抢占山头。 他在康泰复制了这一手段，在政府的招标中，康泰用低价摆平了一切竞争者。 乙肝疫苗单人份的出厂价格本来在15元左右，康泰直接报价6.9元，迅速拿下了国家免疫规划疫苗项目的大笔订单。对于竞标的研究所来说，这比它们的成本价还低，毕竟国家规定的出厂价都需要9.3元。 2013年12月，康泰和杜伟民迎来了最大危机。在十天时间里，共有8名新生儿在接种康泰的乙肝疫苗后死亡。 一个月后，食药总局和卫计委的调查显示，所有的婴儿死亡为偶合性死亡，疫苗质量没有问题，向康泰生物归还了生产证书。 风波过后，康泰安然上市，市值从杜伟民收购时的6亿元飙升到现在的400亿元。 高俊芳、韩刚君与杜伟民三位疫苗之王，有太多共同点。 他们对疫苗企业的控制和改造路径相似。瞄准的都是老牌疫苗企业，长生生物、延申生物和深圳康泰，背后都是中国国有的生物制剂研究所。 他们以非常低廉的价格迅速入手，实现完全控股，然后在短时间内拿到多个疫苗生产牌照，为将来上市铺路。 最重要的一点，这些企业所属的有关部门似乎完全没有意识到疫苗生产牌照的价值——疫苗的毛利普遍在80%以上。 高俊芳买下长生生物时，企业估值为1.2亿元，2015年借壳上市时，市值为55亿元； 2008年杜伟民吃进深圳康泰时，企业估值为6亿元，2016年上市首日，市值达到138亿元； 江苏延申没能上市，不过韩刚君和杜伟民是以2222万元的估值入股的，不过就在他们重组的那三年，延申的净利润总额就达到8400万元。 兽爷的好友你包叔说： 都是九年义务教育，科研工作者怎么这么好骗。 康泰生物上市前的半年内，公司的股权在个人和机构之间进行了20多次倒手。 深交所曾经质疑其中是否存在利益输送和国资流失，要求公司说明转让的原因及合理性等，但康泰始终没有详细回答这个问题。 高俊芳则用同样的手法，把自己的儿子、老公、小姑子、外甥和侄女全部变成了长生生物的股东。 就像360安全卫士，安装后，你会发现有各种360软件出现在你的电脑里。 2017胡润百富榜中，杜伟民以73亿元的身价位列第559位，高俊芳家族以51亿位列第820位。 如果不是江苏延申的狂犬疫苗出了问题，韩刚君也该出现在这个名单上的。 疫苗之王们都起于草莽，没有人知道他们的钱从哪来的。 高俊芳入股长生生物的4000多万全部是自筹资金，当时上市公司的公告显示，她的月薪只有6000元。高俊芳说自己掏了200万，其余的钱一会说是亲友凑的，一会说是和银行贷款。 杜伟民和韩刚君之前分别是江西省卫生防疫站和河南开封龙亭区卫生防疫站的普通员工。下海不过四五年时间，成了疫苗行业最重要的资本推手。 都是天才。生子当如防疫员。 世界上最大的军火出口国是美俄英法中，联合国安理会的五个常任理事国。 中国新闻事件最多的，也是这些疫苗之王们。 2018年7月11日，长生生物内部的一名员工实名举报疫苗生产存在造假。国家药监局马上对长生生物进行飞行检查，发现狂犬病疫苗生产存在记录造假。 国家药监局已要求吉林省局收回长春长生的药品GMP证书，长春长生主动召回有效期内所有批次的狂犬病疫苗。 在对长生生物调查的时候，吉林食药监管局“顺手”对其两年前的违规行为进行了处罚。 2017年11月，食品药品监管总局接到报告，在抽检中发现长生生物一个批次的百白破疫苗效价指标不符合标准规定，接种后可能会影响接种儿童的白喉、破伤风和百日咳的免疫效果。 这时25万支疫苗已经全部销往山东，打入25万多名儿童的身体。 8个月过去，吉林有关部门行动迅速，没收了库存的186支疫苗，对长生生物罚款300多万。 186支，长生生物的库存真多啊。300万，处罚力度真大呀。 于是很快有了第二次造假。 短短三年时间，长生生物狂犬病疫苗的市场占有率，就从不到4%上升到28%，成为中国第二大狂犬病疫苗供应商，正在威胁行业霸主成大生物的市场地位。 成大生物疫苗的报价是149元，长春长生的报价则是239元，而且还要比成大生物多打一针。 生物制药行业的朋友说： 活了这么久，竟然见到价格更高、针次更多的产品，把价格更低、针次更少的行业老大给压下去。 兽爷发现，长生生物2017年销售费用为5.83亿元，也就是说25个销售人员每人的销售费用是2330万元，是康泰生物的4倍，是成大生物的47倍。 兽爷就是租了个摊位卖煎饼的。这些数字是什么意思，我是一点都看不懂的。对了，城管来了，我要去搞好下关系去了。 1989年，在默克公司总裁罗伊·瓦杰洛斯的主导下，乙肝疫苗生产技术被以极低的价格送给中国人民。他说，预防医学是最好的医学，对付传染性疾病的最好方法是预防它。 那时，这位乙肝英雄应该没有想到，传染病可以预防，有些事却无法预防。 穷病真的是没法治的？]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[openssl生成CA证书]]></title>
    <url>%2F2018%2F07%2F19%2Fgenerate-crt%2F</url>
    <content type="text"><![CDATA[生成Key文件1openssl genrsa -aes256 -out bran.key 2048 生成证书请求文件1openssl req -new -key bran.key -out bran.csr 生成证书1openssl x509 -req -days 3650 -in bran.csr -signkey bran.key -out bran.crt]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kubernetes安装istio]]></title>
    <url>%2F2018%2F07%2F10%2Fnew-to-istio%2F</url>
    <content type="text"><![CDATA[下载Istio下载最新版的istio1curl -L https://git.io/getLatestIstio | sh - 12cd istio-0.8.0export PATH=$PWD/bin:$PATH 安装文件在install目录下，istioctl执行文件在bin目录下，一些应用在samples目录下 安装Istio1kubectl apply -f install/kubernetes/istio-demo.yaml 由于我用的是docker-for-mac，我的kubernetes是没有Loadbalancer的，所以我把istio-demo.yaml文件里的LoadBalancer改成了NodePort 验证Istio查看service和pod是否都正常运行 部署应用部署应用有两种方式： 安装了Istio-sidecar-injecor 12kubectl label namespace &lt;namespace&gt; istio-injection=enabledkubectl create -n &lt;namespace&gt; -f &lt;your-app-spec&gt;.yaml 没有安装Istio-sidecar-injecor 1kubectl create -f &lt;(istioctl kube-inject -f &lt;your-app-spec&gt;.yaml) 在这里我们部署samples里的bookinfo应用1kubectl label namespace bran istio-injection=enabled 1kubectl apply -f samples/bookinfo/kube/bookinfo.yaml -n bran 创建应用的ingress gateway1istioctl create -f samples/bookinfo/routing/bookinfo-gateway.yaml 其中在bookinfo-gateway.yaml的meta里面加了namesapce: bran 创建完成了可以看到 访问应用通过nodeport:ip/productpage访问bookinfo应用 多点几次，发现有不同的页面出现。应用用到了负载均衡]]></content>
      <categories>
        <category>ServiceMesh</category>
      </categories>
      <tags>
        <tag>istio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[删除私有仓库镜像]]></title>
    <url>%2F2018%2F07%2F08%2Fdelete-docker-image%2F</url>
    <content type="text"><![CDATA[对于私有仓库的镜像，我们无法直接删除。当随着镜像的越来越多，会导致磁盘空间越来越小 阅读registry v2的http API后发现删除镜像需要调用几个API 获取image的digest 删除镜像的manifests 下面是删除私有registry的镜像脚本clean.shUsage：bash clean.sh your-image-name 需要安装jq，jq是终端解析json输出的利器 12345678910111213141516171819202122232425#!/usr/bin/env bashACCEPT_HEADER="Accept: application/vnd.docker.distribution.manifest.v2+json"DOCKER_REGISTRY="your-registry:35000/v2"AUTH="-uusername:password"REPOSITORY=$1TAGS=`curl --silent -X GET -k $AUTH $DOCKER_REGISTRY/$REPOSITORY/tags/list | jq -r '."tags"[]'`echo image $REPOSITORY has tags: $TAGSfor TAG in $&#123;TAGS[@]&#125;do echo "i am going to delete $REPOSITORY:$TAG" digest_value=`curl -X GET -k --head --silent -H "Accept: application/vnd.docker.distribution.manifest.v2+json" $AUTH $DOCKER_REGISTRY/$REPOSITORY/manifests/$TAG 2&gt;&amp;1 | grep Docker-Content-Digest | awk '&#123;print $2&#125;'` digest_url="$DOCKER_REGISTRY/$REPOSITORY/manifests/$digest_value" echo $digest_url URL=$&#123;digest_url%$'\r'&#125; curl -X DELETE -k -H "Accept: application/vnd.docker.distribution.manifest.v2+json" $AUTH $URLdone#docker exec -it registry bin/registry garbage-collect /etc/docker/registry/config.yml#REPOSITORY_PATH="/var/lib/registry/docker/registry/v2/repositories"#docker exec -it registry rm -rf $REPOSITORY_PATH/$REPOSITORY 脚本里面注释的几行需要解释一下： gc回收，我们删除image的mainfests的时候，仓库并不会删除image，只有当你调用GC回收的时候，才会删除。这个可以用crontab定时执行。 删除具体的镜像目录。（当我们用GC回收的时候，其实只是把镜像名字从仓库里面去掉了。但是实际上磁盘还是存在这个镜像的。这个只能是通过rm删除 结尾：这个脚本只是删除单一镜像。当然可以更进一步的封装，删除所有镜像等等]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>registry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用registry搭建docker私有仓库]]></title>
    <url>%2F2018%2F07%2F08%2Fbuild-docker-registry%2F</url>
    <content type="text"><![CDATA[准备目录首先在根目录下创建一个文件夹registry（取名随意），在registry目录下面创建三个文件夹data，auth，certs 设置registry的用户密码1docker run --rm --entrypoint htpasswd registry:2 -Bbn &#123;&#123;username&#125;&#125; &#123;&#123;password&#125;&#125; &gt; auth/htpasswd 生成证书文件1docker run --rm -e COMMON_NAME=pek2-office-9th-10-117-169-121.eng.vmware.com -e KEY_NAME=domain -v /root/registry/certs:/certs centurylink/openssl COMMON_NAME 是你的FQDN上面的命令执行完成，你会在/root/registry/certs目录下面生成三个文件：domain.crt, domain.csr, domain.key如果你遇到permission error， 有可能是selinux的问题，可以执行setenforce 0 运行registry1docker run -d --name registry -p 5000:5000 -v /root/registry/data:/var/lib/registry -v /root/registry/auth:/auth -v /root/registry/certs:/certs -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key -e "REGISTRY_AUTH=htpasswd" -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd registry:2 拷贝证书文件12mkdir -p /etc/docker/certs.d/pek2-office-9th-10-117-169-121.eng.vmware.com:5000cp /root/registry/certs/domain.crt /etc/docker/certs.d/pek2-office-9th-10-117-169-121.eng.vmware.com:5000 push镜像到私有Registry123docker login -u &#123;&#123;username&#125;&#125; -p &#123;&#123;password&#125;&#125; pek2-office-9th-10-117-169-121.eng.vmware.com:5000docker tag ubuntu pek2-office-9th-10-117-169-121.eng.vmware.com:5000/ubuntu:firstimagedocker push pek2-office-9th-10-117-169-121.eng.vmware.com:5000/ubuntu:firstimage 到此，我们搭建好了我们的私有仓库]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>registry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo集成Gitalk评论]]></title>
    <url>%2F2018%2F07%2F07%2Fhexo-next-gitalk%2F</url>
    <content type="text"><![CDATA[开端想在自己的博客系统里集成评论系统，到网上一搜。最后发现Gitalk评论系统用的人最多，受称赞比较多 Gitalk Demo: https://gitalk.github.io/ 注册GitHub Application在GitHub上注册新应用，链接：https://github.com/settings/applications/new 参数说明： Application name: # 应用名称，我的名称是hexo-nsxt-comments Homepage URL: # 网站URL，如https://branw.cn Application description: # 描述，随意 Authorization callback URL: # 网站URL，https://branw.cn 填写网站URL的时候，注意要填写你自己域名的网址，没有的话就写github.io网址，我在这个地方花了好多时间，最后写对了网址URL就成功了 注册完成后会得到ClientID, Client Secret，后面配置_config.yml的时候会用到 创建repo创建一个与应用名称一样的repo，用来存放评论例如：我的repo名字就是：hexo-nsxt-comments 配置Gitalk新建/layout/_third-party/comments/gitalk.swig文件，并添加内容：123456789101112131415161718192021&#123;% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname %&#125; &#123;% if theme.gitalk.enable %&#125; &#123;% if page.comments %&#125; &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; const gitalk = new Gitalk(&#123; clientID: &apos;&#123;&#123;theme.gitalk.clientID&#125;&#125;&apos;, clientSecret: &apos;&#123;&#123;theme.gitalk.clientSecret&#125;&#125;&apos;, repo: &apos;&#123;&#123;theme.gitalk.repo&#125;&#125;&apos;, owner: &apos;&#123;&#123;theme.gitalk.owner&#125;&#125;&apos;, admin: &apos;&#123;&#123;theme.gitalk.admin&#125;&#125;&apos;.split(&apos;,&apos;), pagerDirection: &apos;&#123;&#123;theme.gitalk.pagerDirection&#125;&#125;&apos;, id: md5(window.location.pathname), distractionFreeMode: false &#125;) gitalk.render(&apos;gitalk-container&apos;) &lt;/script&gt; &#123;% endif %&#125; &#123;% endif %&#125;&#123;% endif %&#125; 修改/layout/_partials/comments.swig123&#123;% elseif theme.gitalk.enable %&#125; &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt; 修改layout/_third-party/comments/index.swig，在最后一行添加内容：1&#123;% include &apos;gitalk.swig&apos; %&#125; 在主题配置文件next/_config.yml中添加如下内容：12345678gitalk: enable: true owner: onesafe repo: hexo-nsxt-comments clientID: xxxxxxxxx clientSecret: xxxxxxxxx admin: onesafe pagerDirection: last 授权最后一步了这时候打开博客，发现评论是空的，没有创建ISSUE如果我们前面的都配置成功的话，尤其是Authorization callback URL配置成功的话这时候我们只需要用admin账户登录GitHub授权就大功告成了 下面的图就是授权的过程，点击授权就OK了]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作总结]]></title>
    <url>%2F2018%2F07%2F06%2Fwork-conclusion%2F</url>
    <content type="text"><![CDATA[我是5.10号入职现在的公司的，对我来说是一个全新的开始 5月-6月首先来是看service-manager的代码，之前对Java不熟，对我来说也是一个小小的挑战 也能够drive我很好的学习Java，感觉来了两个月，Java已经可以愉快的玩耍了 用spring-boot-starter-actuator做了service-manager的健康检查 参考service-manager写一个auto-model-online项目 image-hub的项目，是与镜像相关的 elf-bundled项目 在这个过程当中，结合写代码和看书，对Spring boot理解的更深刻了。学会使用Java Spring boot 异步，并发。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
</search>
